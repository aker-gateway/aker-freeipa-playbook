---
#
# Install/run nginx
#

- name: Install nginx, apache2-utils, httplib2
  apt: name={{ item }} state=present
  become: true
  with_items:
    - nginx
    - python-httplib2
    - apache2-utils

# create /etc/nginx/conf.d/ directory
- name: Create nginx directory structure
  file: path=/etc/nginx/conf.d/
    state=directory
    mode=0755

# deploy kibana.conf with FQDN
- name: Setup nginx reverse proxy for kibana
  template:
    src=kibana.conf.j2
    dest=/etc/nginx/conf.d/kibana.conf
    owner=root
    group=root
    mode=0644
  become: true
  register: nginx_needs_restart

# deploy basic nginx.conf 8080 vhost
- name: Setup nginx TCP/8080 vhost for SSL certificate
  template:
    src=ubuntu_nginx.conf.j2
    dest=/etc/nginx/nginx.conf
    owner=root
    group=root
    mode=0644
  become: true

# start nginx service
- name: Start nginx service
  command: systemctl restart nginx.service
  ignore_errors: true
  when: nginx_needs_restart != 0

- name: Check if nginx is in use
  shell: systemctl is-enabled nginx.service | egrep -qv 'masked|disabled'
  register: nginx_in_use
  ignore_errors: yes
  tags:
    # Skip ANSIBLE0012 Commands should not change things if nothing needs doing
    # Determine if nginx is enabled
    - skip_ansible_lint

- name: Set nginx to start on boot
  command: systemctl enable nginx.service
  ignore_errors: true
  when: nginx_in_use.rc != 0
  
  
- name: Configure ufw rules
  ufw: rule={{ item.rule }} port={{ item.port }} proto={{ item.proto }}
  with_items:
    - { rule: 'allow', port: "{{nginx_kibana_port}}", proto: 'tcp' }
    - { rule: 'allow', port: "{{elk_server_ssl_cert_port}}", proto: 'tcp' }
  register: ufw_needs_restart

- name: Restart ufw 
  service: name=ufw state=restarted  
  ignore_errors: true
  when: ufw_needs_restart
  tags:
    # Skip ANSIBLE0013 Use shell only when shell functionality is required
    # No systemctl module available in current stable release (Ansible 2.1)
    - skip_ansible_lint
    

